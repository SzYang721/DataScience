}
else if(method == "lda"){
new.mod<-lda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method == "qda"){
new.mod<-qda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method=="knn"){
X.train <- model.matrix(mod, data=data)
X.test <- model.matrix(mod, data=test)
Y.train <- as.factor(data$Transported)
mod <- knn(X.train, X.test, Y.train , k = 20)
}
for(a in 1:index){
if(method != "knn")
boot.pred[i,a]<-pred.test[a]
else if(method == "knn")
boot.pred[i,a]<-mod[a]
}
}
out<-matrix(0,index,2)
out[,1]<-apply(boot.pred,2,mean)
out[,2]<-apply(boot.pred,2,sd)
return(out)
}
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
?model.matrix()
X.train <- model.matrix(mod.final, data=shrink.data)
X.test <- model.matrix(mod.final, data=valid)
Y.train <- as.factor(shrink.data$Transported)
mod <- knn(X.train, X.test, Y.train , k = 20)
mean(valid$Transported != mod)
table (mod,valid$Transported)
mod <- knn(X.train, X.test, Y.train , k = 5)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
View(shrink.data)
str(shrink.data)
View(train.comp)
train.comp <-
read.csv(file="train_comp.csv",header=TRUE,stringsAsFactors=T)
valid<-train.comp[c(1:1693),]
train.comp<-train.comp[-c(1:1693),]
setwd("E:/ANU Sem 2/STAT3040STAT7040 - Statistical Learning/Assignment 2")
train.comp <-
read.csv(file="train_comp.csv",header=TRUE,stringsAsFactors=T)
valid<-
read.csv(file="valid_comp.csv",header=TRUE,stringsAsFactors=T)
test<-
read.csv(file="test_comp.csv",header=TRUE,stringsAsFactors=T)
shrink.data<-train.comp[,c(1,6,8:13)]
cv.out<-method.fwd("knn",shrink.data,10)
cv.out[[2]]
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.46)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(shrink.data)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(shrink.data)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
mod.final<-as.formula(Transported ~  RoomService + Spa +
VRDeck + FoodCourt)
View(cv.out)
View(cv.out[1])
View(cv.out[[1]])
mod.lowcv<-cv.out[[2]]
mod.lowcv
mod.final<-as.formula(Transported ~  RoomService + Spa +
VRDeck + FoodCourt)
task = as_task_classif(train.comp, target = "Transported", positive = "True")
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
model.matrix(mod.final,data = shrink.data)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
mod.final<-as.formula(Transported ~  RoomService + Spa +
VRDeck + FoodCourt)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-cbind(boot.pred.valid,boot.pred.valid[,1]+1.96*boot.pred.valid[,2],boot.pred.valid[,1]-1.96*boot.pred.valid[,2])
names(boot.pred.valid)<-c("Est.prob","Std of prob","Upper 95% CI","Lower 95% CI")
View(boot.pred.valid)
boot.fn <- function (method, mod, K, data, test, index){
boot.pred<-matrix(0,K,index)
for(i in 1:K){
set.seed(i+i^2+i*2022)
resample <- data[sample(nrow(data), nrow(data),replace = TRUE), ]
if(method == "glm"){
new.mod<-glm(mod$formula,data = resample,family = "binomial")
pred.test<-predict(new.mod, newdata = test[1:index,],type = "response")
}
else if(method == "lda"){
new.mod<-lda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method == "qda"){
new.mod<-qda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method=="knn"){
X.train <- model.matrix(mod, data=resample)
X.test <- model.matrix(mod, data=test)
Y.train <- as.factor(resample$Transported)
mod <- knn(X.train, X.test, Y.train , k = 20)
}
for(a in 1:index){
if(method != "knn")
boot.pred[i,a]<-pred.test[a]
else if(method == "knn")
boot.pred[i,a]<-mod[a]
}
}
out<-matrix(0,index,2)
out[,1]<-apply(boot.pred,2,mean)
out[,2]<-apply(boot.pred,2,sd)
return(out)
}
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
class(shrink.data[sample(nrow(shrink.data), nrow(shrink.data),replace = TRUE), ])
X.train <- model.matrix(mod.final, data=shrink.data[sample(nrow(shrink.data), nrow(shrink.data),replace = TRUE), ])
boot.fn <- function (method, mod, K, data, test, index){
boot.pred<-matrix(0,K,index)
for(i in 1:K){
set.seed(i+i^2+i*2022)
resample <- data[sample(nrow(data), nrow(data),replace = TRUE), ]
if(method == "glm"){
new.mod<-glm(mod$formula,data = resample,family = "binomial")
pred.test<-predict(new.mod, newdata = test[1:index,],type = "response")
}
else if(method == "lda"){
new.mod<-lda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method == "qda"){
new.mod<-qda(mod,data = resample)
pred.test <- predict(new.mod, newdata = test[1:index,])$posterior[,2]
}
else if(method=="knn"){
X.train <- model.matrix(mod, data=resample)
X.test <- model.matrix(mod, data=test[1:index,])
Y.train <- as.factor(resample$Transported)
mod <- knn(X.train, X.test, Y.train , k = 20)
}
for(a in 1:index){
if(method != "knn")
boot.pred[i,a]<-pred.test[a]
else if(method == "knn")
boot.pred[i,a]<-mod[a]
}
}
out<-matrix(0,index,2)
out[,1]<-apply(boot.pred,2,mean)
out[,2]<-apply(boot.pred,2,sd)
return(out)
}
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
View(shrink.data)
View(valid)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
en
end
boot.pred.test<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,test,5))
boot.pred.test<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,test,5))
boot.pred.test<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,test,5))
boot.pred.test<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,test,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
shrink.data[sample(nrow(shrink.data), nrow(shrink.data),replace = TRUE), ]
u<-shrink.data[sample(nrow(shrink.data), nrow(shrink.data),replace = TRUE), ]
View(u)
X.train <- model.matrix(mod.final, data=u)
X.test <- model.matrix(mod.final, data=test[1:5,])
View(test)
test.raw<-
read.csv(file="test.csv",header=TRUE,stringsAsFactors=F,na.strings = "")
Side<-rep(NA, nrow(test.raw))
Port<-grep("P",test.raw$Cabin)
Starb<-grep("S",test.raw$Cabin)
Side[Port]<-"P"
Side[Starb]<-"S"
Side<-as.factor(Side)
test.raw<-test.raw[,1:13]
test.raw<-data.frame(Side,test.raw)
test.raw$PassengerGroup <-
sapply(test.raw$PassengerId,function(x) strsplit(x,'_')[[1]][1])
set.seed(1)
test.raw$RoomService<-log(test.raw$RoomService+1)+rnorm(nrow(test.raw),1,0.01)
test.raw$FoodCourt<-log(test.raw$FoodCourt+1)+rnorm(nrow(test.raw),1,0.01)
test.raw$ShoppingMall<-log(test.raw$ShoppingMall+1)+rnorm(nrow(test.raw),1,0.0001)
test.raw$Spa<-log(test.raw$Spa+1)+rnorm(nrow(test.raw),1,0.01)
test.raw$VRDeck<-log(test.raw$VRDeck+1)+rnorm(nrow(test.raw),1,0.01)
summary(test.raw)
##manage variable
test.raw <- test.raw %>% dplyr::select(-PassengerId,-Cabin,-Name)
test.raw$Transported<-as.factor(test$Transported)
test.raw$Side<-as.factor(test.raw$Side)
test.raw$HomePlanet<-as.factor(test.raw$HomePlanet)
test.raw$CryoSleep<-as.factor(test.raw$CryoSleep)
test.raw$Destination<-as.factor(test.raw$Destination)
test.raw$VIP<-as.factor(test.raw$VIP)
test.raw$PassengerGroup<-as.factor(test.raw$PassengerGroup)
miss_map(test.raw)
test_missing <- unlist(lapply(test.raw, function(x) sum(is.na(x))))/nrow(test)
sort(test_missing[test_missing > 0], decreasing = TRUE)
test_numeric<-test.raw[,c(7,9:13)]
cor(test_numeric, use = "pairwise.complete.obs")
View(test)
View(test.raw)
test_numeric<-test.raw[,c(5,7:12)]
cor(test_numeric, use = "pairwise.complete.obs")
test_numeric<-test.raw[,c(5,7:12)]
cor(test_numeric, use = "pairwise.complete.obs")
test_numeric<-test.raw[,c(5,7:11)]
cor(test_numeric, use = "pairwise.complete.obs")
test.raw <- test.raw %>% dplyr::select(-PassengerId,-Cabin,-Name)
test.raw$Side<-as.factor(test.raw$Side)
test.raw$HomePlanet<-as.factor(test.raw$HomePlanet)
test.raw$CryoSleep<-as.factor(test.raw$CryoSleep)
test.raw$Destination<-as.factor(test.raw$Destination)
test.raw$VIP<-as.factor(test.raw$VIP)
imp <- mice(test.raw, maxit=0)
predM <- imp$predictorMatrix
meth <- imp$method
predM[, c("PassengerGroup")] <- 0
# Ordered categorical variables
poly <- c("CryoSleep", "VIP")
# Dichotomous variable
log <- c("Side")
# Unordered categorical variable
poly2 <- c("HomePlanet","Destination","PassengerGroup")
meth[poly] <- "polr"
meth[log] <- "logreg"
meth[poly2] <- "polyreg"
test <- mice(test.raw, maxit = 5,
predictorMatrix = predM,
method = meth, print =  FALSE)
test <- mice::complete(test, 1)
test$PassengerGroup<-as.factor(test$PassengerGroup)
write.csv(test,file="test_comp.csv",row.names=FALSE)
test <-
read.csv(file="test_comp.csv",header=TRUE,stringsAsFactors=T)
################################ Missing data check test
par(mfrow = c(1,1))
miss_map(test)
boot.pred.valid<-as.data.frame(boot.fn("qda",mod.final,100,train.comp,valid,5))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
boot.pred.test<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,test,5))
pred.test <- predict(best.mod, newdata = test)$class
submiss.f<-data.frame(test.raw$PassengerId,pred.test)
names(submiss.f)<-c("PassengerId","Transported")
write.csv(submiss.f,file="submission f.csv",row.names=FALSE)
best.mod
cv.out<-method.fwd("qda",train.comp)
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.30)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
mod.final<-as.formula(Transported ~  CryoSleep + Age + Spa +
HomePlanet + VRDeck + RoomService)
full.mod<-as.formula(Transported~.)
null.mod<-as.formula(Transported~1)
cv.out<-method.fwd("qda",train.comp)
View(train.comp)
View(train.comp)
View(valid)
setwd("E:/ANU Sem 2/STAT3040STAT7040 - Statistical Learning/Assignment 2")
train.comp <-
read.csv(file="train_comp.csv",header=TRUE,stringsAsFactors=T)
valid<-
read.csv(file="valid_comp.csv",header=TRUE,stringsAsFactors=T)
test<-
read.csv(file="test_comp.csv",header=TRUE,stringsAsFactors=T)
full.mod<-as.formula(Transported~.)
null.mod<-as.formula(Transported~1)
cv.out<-method.fwd("qda",train.comp)
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.30)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
mod.lowcv
mod.final<-as.formula(Transported ~  CryoSleep + Side + Age
+ Spa + RoomService + VRDeck
+ HomePlanet + Destination)
best.mod<-qda(mod.final,data = train.comp)
pred.test <- predict(best.mod, newdata = test)$class
submiss.f<-data.frame(test.raw$PassengerId,pred.test)
names(submiss.f)<-c("PassengerId","Transported")
test.raw<-
read.csv(file="test.csv",header=TRUE,stringsAsFactors=F,na.strings = "")
submiss.f<-data.frame(test.raw$PassengerId,pred.test)
names(submiss.f)<-c("PassengerId","Transported")
write.csv(submiss.f,file="submission f.csv",row.names=FALSE)
full.mod<-as.formula(Transported~.)
null.mod<-as.formula(Transported~1)
cv.out<-method.fwd("lda",train.comp)
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.28)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
full.mod<-as.formula(Transported~.)
null.mod<-as.formula(Transported~1)
glm.full<-glm(full.mod,data = train.comp,
family = binomial)
glm.null <- glm(null.mod,
data = train.comp,family = binomial
)
cv.err<-function(method,formula,data,K,knnfold){
n<-nrow(data)
set.seed(888)
fold<-sample(rep(1:K,each = n/K))
mse.out <- rep(0,K)
##
for(k in 1:K){
data.train <- data[fold!=k,]
data.test <- data[fold==k,]
if(method=="glm"){
mod.train <- glm(formula, data = data.train,family = "binomial")
pred.test <- predict(mod.train, newdata = data.test,type = "response")
glm.pred<-rep("False",nrow(data.test))
glm.pred[pred.test>0.5] = "True"
mse.out[k] <- mean(data.test$Transported != glm.pred)
}
else if(method == "lda"){
mod.train <- lda(formula, data = data.train)
lda.class <- predict(mod.train, newdata = data.test)$class
mse.out[k] <- mean(data.test$Transported != lda.class)
}
else if(method == "qda"){
mod.train <- qda(formula, data = data.train)
qda.class <- predict(mod.train, newdata = data.test)$class
mse.out[k] <- mean(data.test$Transported != qda.class)
}
else if(method == "knn"){
X.train <- model.matrix(formula, data =data.train)
X.test <- model.matrix(formula, data = data.test)
mod.out <- knn(X.train, X.test, data.train$Transported , k = knnfold)
mse.out[k] <- mean(data.test$Transported != mod.out)
}
}
mse.est <- mean(mse.out)
sd.mse.est <- sd(mse.out)/sqrt(K)
return(c(mse.est,sd.mse.est))
}
cv.err("glm",glm.null,train.comp,10)
method.fwd<-function(method,data,kfold){
variable<-names(data[2:ncol(data)])
max.steps<-length(variable)
mod<-"Transported ~ "
a<-1
cv.out<-matrix(0,nrow = max.steps,ncol = 2)
while(a<=max.steps){
cv.list<-matrix(0,nrow = length(variable),ncol = 2)
for(i in 1:length(variable)){
if(a == 1){formula<-as.formula(paste(mod,variable[i]))}
else if(a>1){formula<-as.formula(paste(mod,"+",variable[i]))}
if(method=="glm")
re<-cv.err("glm",formula,data,10)
else if(method=="lda")
re<-cv.err("lda",formula,data,10)
else if(method == "qda")
re<-cv.err("qda",formula,data,10)
else if(method == "knn")
re<-cv.err("knn",formula,data,10,knnfold = kfold)
cv.list[i,1]<-re[1]
cv.list[i,2]<-re[2]
}
selected.var<-variable[which.min(cv.list[,1])]
cv.out[a,1]<-min(cv.list[,1])
cv.out[a,2]<-cv.list[which.min(cv.list[,1]),2]
variable<-variable[-which.min(cv.list[,1])]
mod<-paste(mod, "+",selected.var)
a <-a +1
}
return(list(cv.out,mod))
}
cv.out<-method.fwd("glm",train.comp)
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.28))
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.last<-cv.out[[2]]
mod.last
cv.out<-method.fwd("lda",train.comp)
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.28)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(train.comp)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
mod.lowcv
View(test)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
setwd("E:/ANU Sem 2/STAT3040STAT7040 - Statistical Learning/Assignment 2")
train.comp <-
read.csv(file="train_comp.csv",header=TRUE,stringsAsFactors=T)
valid<-
read.csv(file="valid_comp.csv",header=TRUE,stringsAsFactors=T)
test<-
read.csv(file="test_comp.csv",header=TRUE,stringsAsFactors=T)
View(test.raw)
shrink.data<-train.comp[,c(1,6,8:13)]
cv.out<-method.fwd("knn",shrink.data,10)
cv.out[[2]]
plot(cv.out[[1]][,1],type = "p",lwd = 2,cex = 1.2,
ylab = "Cross Validation (Steps)",
xlab = "Steps",
main = "Forward Selection based on CV",
ylim = c(0.21,0.46)
)
points(which.min(cv.out[[1]][,1]),min(cv.out[[1]][,1]),
pch = 18,col = "red",cex = 1.5)
points(1:(ncol(shrink.data)-1),cv.out[[1]][,1]+cv.out[[1]][,2],
pch = 25,col = "red",cex = 1)
points(1:(ncol(shrink.data)-1),cv.out[[1]][,1]-cv.out[[1]][,2],
pch = 24,col = "red",cex = 1)
mod.lowcv<-cv.out[[2]]
mod.lowcv
mod.final<-as.formula(Transported ~  RoomService + Spa +
VRDeck + FoodCourt)
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
task = as_task_classif(train.comp, target = "Transported", positive = "True")
knn_learner <- lrn("classif.kknn")
library(dplyr)
##install.packages("mice")
library(mice)
library(leaps)
library(MASS)
library (boot)
library(class)
#install.packages("mlr3")
library(mlr)
library(mlr3)
#install.packages("mlr3viz")
library(mlr3viz)
#install.packages("GGally")
library(GGally)
#install.packages("kknn")
library(kknn)
#install.packages("mlr3verse")
library(mlr3verse)
#install.packages("FSelector")
library(FSelector)
library(mlr3fselect)
task = as_task_classif(train.comp, target = "Transported", positive = "True")
knn_learner <- lrn("classif.kknn")
resampling = rsmp("cv", folds = 10)
measure = msr("classif.ce")
resampling$instantiate(task)
terminator = trm("stagnation", iters = 50)
instance = FSelectInstanceSingleCrit$new(
task = task,
learner = knn_learner,
resampling = resampling,
measure = measure,
terminator = terminator)
fselector = fs("sequential")
fselector$optimize(instance)
fselector$optimization_path(instance)
as.data.table(instance$archive, exclude_columns = c("runtime_learners", "timestamp", "batch_nr", "resample_result", "uhash"))
boot.pred.valid<-as.data.frame(boot.fn("knn",mod.final,100,shrink.data,valid,5))
